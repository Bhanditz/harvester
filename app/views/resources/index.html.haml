%h1= t("resources.index.header")
%p
  .ui.label
    %i.inbox.icon
    = t("resources.index.harvest_jobs", count: Delayed::Job.where(queue: 'harvest', locked_at: nil).count)
  .ui.label
    %i.image.icon
    = t("resources.index.media_jobs", count: Delayed::Job.where(queue: 'media', locked_at: nil).count)
%h2= t("resources.index.harvest_header")
.ui.segment
  - hlog = Hlog.last
  - harv = hlog&.harvest
  - if harv.nil?
    .ui.header= t("resources.index.no_log")
  - else
    .ui.header= t("resources.index.most_recent_log")
    = harv.resource.name
    = render('harvests/show', harv: harv)
    %br
    = hlog.message
  - harv = Harvest.order('updated_at DESC').first
  - if harv.nil?
    .ui.header= t("resources.index.no_harvest")
  - else
    .ui.header= t("resources.index.most_recent_harvest")
    = harv.resource.name
    = render('harvests/show', harv: harv)
  - harvs = Harvest.where(['failed_at > ?', 2.days.ago]).order('updated_at DESC').limit(5)
  .ui.header= t("resources.index.failures", count: harvs.size)
  - unless harvs.empty?
    - harvs.each do |harv|
      = harv.resource.name
      = render('harvests/show', harv: harv)
      %br
%h2= t("resources.index.list_header")
.ui.segment
  %p= paginate(@resources)
  .ui.relaxed.divided.list
    - @resources.each do |resource|
      .item
        %i.large.file.middle.aligned.icon
        .content
          .header= link_to(resource.name, resource)
          - if resource.publish_status
            .description= t("resources.publish_status.#{resource.publish_status}")
  %p= paginate(@resources)
.ui.section
  .ui.button= link_to(t("resources.create.action"), new_resource_path)
  - unless params[:all]
    .ui.button= link_to(t("resources.actions.show_all"), resources_path(all: true))
