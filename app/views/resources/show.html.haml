%h1.ui.header
  = @resource.name
  .sub.header
    = link_to(t("resources.actions.back"), resources_path)
    •
    = link_to(t("edit"), edit_resource_path(@resource))
    •
    = link_to(t("delete"), @resource, method: :delete, data: { confirm: t("are_you_sure") })


.ui.list
  - unless @resource.abbr.blank?
    .item
      %strong= "Abbreviation:"
      = @resource.abbr
  .item
    %strong= "Minimum Days Between Harvests:"
    = @resource.min_days_between_harvests
  - if @resource.harvest_day_of_month
    .item
      %strong= "Harvests on Day of Month:"
      = @resource.harvest_day_of_month
  - if @resource.harvest_months_json && ! @resource.harvest_months_json == ""
    .item
      %strong= "Harvests on Months:"
      - months = JSON.parse(@resource.harvest_months_json)
      = months.join(", ")
  - else
    .item= "This resource has not had a successful harvest."
  - if @resource.nodes_count
    .item
      %strong= "Nodes:"
      = @resource.nodes_count
  - else
    .item= "No nodes have been created for this resource."
  .item
    %strong= "URLs for node IDs will direct the client to:"
    - if @resource.pk_url == "$PK"
      "(The ID itself: this assumes the IDs are valid URIs)"
    - else
      = @resource.pk_url.gsub("$PK", "[the identfier]")
  - if @resource.auto_publish?
    "This resource will auto-publish after harvesting."
  - else
    "This resource will NOT be published after harvesting. It must be published manually."
  .item
    %strong= "Trusted:"
    = @resource.not_trusted? ? "No." : "Yes."
  - if @resource.hold_harvesting?
    .item
      %strong= "THIS RESOURCE IS ON HOLD:"
      = "It will not be harvested until an admin releases this hold."
  .item
    %strong= "May Contain Duplicate Taxa:"
    = @resource.might_have_duplicate_taxa? ? "Yes." : "No."
  - if @resource.force_harvest?
    .item
      %strong= "THIS RESOURCE WILL BE HARVESTED ASAP:"
      = "An admin has set this resource to Force Harvest."
  .item
    %strong= "Created:"
    = I18n.l @resource.created_at, format: :short
  .item
    %strong= "Last Updated:"
    = I18n.l @resource.updated_at, format: :short

%h2= "Expected File Format Definitions"
- if @formats.empty?
  .ui.section= "This resource has no file format definitions yet, and cannot be harvested."
- else
  %ul
    - @formats.each do |fmt|
      .item
        %strong= "#{link_to(fmt.represents, fmt)}:".html_safe
        = fmt.get_from
        - if fmt.excel?
          = ", sheet ##{fmt.sheet}"
        = "(#{fmt.fields.size} fields)"
.ui.section
  = link_to(t("resources.show.add_format"), new_resource_format_path(@resource))
%h2= "Harvests"
- if @resource.harvests.empty?
  This resource has not been harvested.
- else
  %ul
    - @resource.harvests.order(created_at: :desc).each do |harv|
      .item
        %strong= "#{link_to(l(harv.created_at, format: :short), harv)}:".html_safe
        - if harv.completed_at
          %strong Completed:
          = "#{l(harv.completed_at, format: :short)}"
        - elsif harv.failed_at
          %strong Failed:
          = "#{l(harv.failed_at, format: :short)}"
        - elsif harv.indexed_at
          %strong Indexed:
          = #{l(harv.indexed_at, format: :short)}"
        - elsif harv.stored_at
          %strong Stored:
          = l(harv.stored_at, format: :short)
        - elsif harv.consistency_checked_at
          %strong Consistency Checked:
          = l(harv.consistency_checked_at, format: :short)
        - elsif harv.names_parsed_at
          %strong Names Parsed:
          = l(harv.names_parsed_at, format: :short)
        - elsif harv.nodes_matched_at
          %strong Nodes Matched:
          = l(harv.nodes_matched_at, format: :short)
        - elsif harv.ancestry_built_at
          %strong Ancestry Built:
          = l(harv.ancestry_built_at, format: :short)
        - elsif harv.units_normalized_at
          %strong Units Normalized:
          = l(harv.units_normalized_at, format: :short)
        - elsif harv.linked_at
          %strong Linked:
          = l(harv.linked_at, format: :short)
        - elsif harv.deltas_created_at
          %strong Delats Created
          = l(harv.deltas_created_at, format: :short)
        - elsif harv.validated_at
          %strong Validated:
          = l(harv.validated_at, format: :short)
        - elsif harv.fetched_at
          %strong Fetched:
          = l(harv.fetched_at, format: :short)
        - else
          \...just started...
        - if harv.time_in_minutes
          = "(took #{harv.time_in_minutes} minutes)"
%h2= t(:resource_nodes_title)
= t(:resource_nodes_count, count: @resource.nodes.published.count)
- unless @resource.nodes.published.empty?
  %h3= t(:resource_nodes_root_head_count, count: @resource.nodes.root.count)
  = paginate(@root_nodes)
  .ui.list
    - @root_nodes.each do |root_node|
      .item= link_to(root_node.canonical || root_node.resource_pk, root_node)
