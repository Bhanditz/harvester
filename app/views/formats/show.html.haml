%h1.ui.header
  = t("formats.show.header", type: @format.represents.titleize, resource: link_to(@format.resource.name, @format.resource)).html_safe
  .sub.header
    = link_to(t("edit"), edit_resource_format_path(@format, resource_id: @format.resource_id))
    â€¢
    = link_to(t("delete"), @format, method: :delete, data: { confirm: t("are_you_sure") })

.ui.list
  - if @format.harvest
    .item
      %strong= "This format was used for harvest on"
      = l(@format.harvest.created_at, format: :short)
  - if @format.excel?
    .item
      %strong= "Sheet:"
      = @format.sheet
  - if @format.header_lines > 1
    .item
      %strong= "Header Lines:"
      = @format.header_lines
  - if @format.header_lines > 1
    .item
      %strong= "Data Begins on Line:"
      = @format.data_begins_on_line
  .item
    %strong= "Read Position:"
    = @format.position
    = "(this is the order in which this file is read out of all of the formats for the resource)"
  .item
    %strong= "File Type:"
    = @format.file_type
  .item
    %strong= "Get From:"
    = @format.get_from
  - if @format.file
    .item
      %strong= "Actual File Location:"
      = @format.file
  - if @format.csv?
    .item
      %strong= "Field Seperator:"
      = @format.field_sep.gsub("\t", "&#92;t (tab)").html_safe
    .item
      %strong= "Line Seperator:"
      = @format.line_sep.gsub("\r", "&#92;r (line return)").gsub("\n", "&#92;n (newline)").html_safe
  .item
    %strong= "UTF8 characters allowed:"
    = @format.utf8? ? "Yes." : "No."

%h2= "Fields (#{@format.fields.size})"
- if @format.fields.empty?
  This format has no fields defined and it
  %strong cannot be harvested.
- else
  .ui.list
    - @format.fields.each do |field|
      .item
        %strong= "#{field.expected_header}"
        = field.validation? ? field.validation : nil
        \&rarr;
        - unless field.mapping.blank?
          = field.mapping
        - unless field.submapping.blank?
          = "(#{field.submapping})"
        - unless field.special_handling.blank?
          %strong Special Handling:
          = field.special_handling
        = field.unique_in_format? ? "(must be unique)" : nil
        = field.can_be_empty? ? nil : "(must not be empty)"
.ui.list
  .item= link_to(t("formats.show.actions.add_field"), new_format_field_path(@format))
  .item= link_to(t("formats.show.actions.return"), resource_path(@format.resource))
