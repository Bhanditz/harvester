%h1
  = @format.represents.titleize
  Format File Definition for
  = link_to(@format.resource.name, @format.resource)
%ul
  - if @format.harvest
    %li
      %strong= "This format was used for harvest on"
      = l(@format.harvest.created_at, format: :short)
  - if @format.excel?
    %li
      %strong= "Sheet:"
      = @format.sheet
  - if @format.header_lines > 1
    %li
      %strong= "Header Lines:"
      = @format.header_lines
  - if @format.header_lines > 1
    %li
      %strong= "Data Begins on Line:"
      = @format.data_begins_on_line
  %li
    %strong= "Read Position:"
    = @format.position
    = "(this is the order in which this file is read out of all of the formats for the resource)"
  %li
    %strong= "File Type:"
    = @format.file_type
  %li
    %strong= "Get From:"
    = @format.get_from
  - if @format.file
    %li
      %strong= "Actual File Location:"
      = @format.file
  - if @format.csv?
    %li
      %strong= "Field Seperator:"
      = @format.field_sep.gsub("\t", "&#92;t (tab)")
    %li
      %strong= "Line Seperator:"
      = @format.line_sep.gsub("\r", "&#92;r (line return)").gsub("\n", "&#92;n (newline)").html_safe
  %li
    %strong= "UTF8 characters allowed:"
    = @format.utf8? ? "Yes." : "No."

%h2= "Fields (#{@format.fields.size})"
- if @format.fields.empty?
  This format has no fields defined and it
  %strong cannot be harvested.
- else
  %ul
    - @format.fields.each do |field|
      %li
        %strong= "#{field.expected_header}"
        = field.validation? ? field.validation : nil
        \&rarr;
        - unless field.mapping.blank?
          = field.mapping
        - unless field.submapping.blank?
          = "(#{field.submapping})"
        - unless field.special_handling.blank?
          %strong Special Handling:
          = field.special_handling
        = field.unique_in_format? ? "(must be unique)" : nil
        = field.can_be_empty? ? nil : "(must not be empty)"
.ui.section
  = link_to(t("formats.show.add_field"), new_format_field_path(@format))
