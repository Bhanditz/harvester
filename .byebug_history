c
quit
[1,2,3,4,nil,565,6].compact
Node.find(36).ancestors.map &:page_id
Node.find 229
Node.find(36).ancestors.map &:canonical
Node.find(36).ancestors.map &:id
Node.find(233)
Node.search('*', :fields=>[:canonical], :where=>{:resource_id=>1, :authors=>["Ellis", "Solander"], :canonical=>"Astrangia poculata" })
Node.search('*', :fields=>[:canonical], :where=>{:resource_id=>1, :authors=>["Ellis", "Solander"], :canonical=>"Astrangia poculata", :ancestor_ids=>233})
how
Node.search('*', how)
results = match(name, fields: [:canonical], where: { resource_id: 1, authors: name.authors })
Node.reindex
how
    how.delete(:where) if how[:where].empty?
    how[:where].merge!(is_hybrid: true) if name.hybrid?
    how[:where].merge!(ancestor_ids: @ancestor.id) if @ancestor
    how[:where].merge!(canonical: name.canonical)
    how[:where] ||= {}
how = { fields: [:canonical], where: { resource_id: 1, authors: name.authors }  }
results = match(name, fields: [:canonical], where: { resource_id: 1, authors: name.authors })
q
@ancestor.in_unmapped_area?
@ancestor
how
results = Node.search('*', how)
node.reindex
node.reindesx
node.search_data
node.ancestors.map(&:id)
node = Node.find 36
Node.where(harvest_id: 1).reindex
node.ancestors.map(&:id)
node.ancestor_ids
results = Node.search('*', how)
how
    how.delete(:where) if how[:where].empty?
    how[:where].merge!(is_hybrid: true) if name.hybrid?
    how[:where].merge!(ancestor_ids: @ancestor.id) if @ancestor
    how[:where].merge!(canonical: name.canonical)
    how[:where] ||= {}
how = { fields: [:canonical], where: { resource_id: 1 } }
results.total_count
results = match(name, fields: [:canonical], where: { resource_id: 1 })
name.authors
name.canonical
results.total_count
results = match(name, fields: [:canonical], where: { resource_id: 1 })
results.total_count
results = match(name, fields: [:canonical], where: { resource_id: 1, authors: name.authors })
c
name.canonical
c
name.canonical
c
name.canonical
c
name.canonical
c
name.canonical
c
name.canonical
c
name.canonical
c
name.canonical
c
results.total_count
results = Node.search('*', how)
how
    how.delete(:where) if how[:where].empty?
    how[:where].merge!(is_hybrid: true) if name.hybrid?
    how[:where].merge!(ancestor_ids: @ancestor.id) if @ancestor
    how[:where].merge!(canonical: name.canonical)
    how[:where] ||= {}
how
    how[:where].merge(is_hybrid: true) if name.hybrid?
    how[:where].merge(ancestor_ids: @ancestor.id) if @ancestor
    how[:where].merge(canonical: name.canonical)
    how[:where] ||= {}
how = { fields: [:canonical], where: { resource_id: 1, authors: name.authors } }
name
how
    how.delete(:where) if how[:where].empty?
    how[:where].merge(is_hybrid: true) if name.hybrid?
    how[:where].merge(ancestor_ids: @ancestor.id) if @ancestor
    how[:where].merge(canonical: name)
    how[:where] ||= {}
how = { fields: [:canonical], where: { resource_id: 1, authors: name.authors } }
how = fields: [:canonical], where: { resource_id: 1, authors: name.authors }
c
$FOO = false
c
q
c
q
reload!
Node.reindex
results.first.authors
results = Node.search("*", where: { resource_id: 1, canonical: "Hylotorus basilewskyi" }, misspellings: false) ; results.total_count
reload!
results.first.authors
results = Node.search("*", where: { resource_id: 1, canonical: "Hylotorus basilewskyi" }, misspellings: false) ; results.total_count
results = Node.search("*", where: { resource_id: 1 }, misspellings: false) ; results.total_count
results = Node.search("*", where: { resource_id: 1, authors: ["Ellis", "Solander"] }, misspellings: false) ; results.total_count
results = Node.search("Hylotorus basilewskyi", fields: [ :canonical ], where: { resource_id: 1, authors: ["Ellis", "Solander"] }, misspellings: false) ; results.total_count
results = Node.search("Hylotorus basilewskyi", fields: [ :canonical ], where: { resource_id: 1, authors: ["Ellis", "Solander"] }, misspellings: false, load: false) ; results.total_count
results = Node.search("Astrangia poculata", fields: [ :canonical ], where: { resource_id: 1, authors: ["Ellis", "Solander"] }, misspellings: false, load: false) ; results.total_count
results = Node.search("Astrangia poculata", fields: [ :canonical ], where: { resource_id: 1 }, misspellings: false) ; results.total_count
results = Node.search("Astrangia poculata", fields: [ :canonical ], where: { resource_id: 1, authors: ["Ellis", "Solander"] }, misspellings: false) ; results.total_count
results = Node.search("Astrangia poculata", fields: [ :canonical ], where: { resource_id: 1, authors: ["Ellis"] }, misspellings: false) ; results.total_count
results.first.scientific_name.authors
results.first.authors
results.first.author_names
results.first
results = Node.search("Astrangia poculata", fields: [ :canonical ], where: { resource_id: 1 }, misspellings: false) ; results.total_count
results = Node.search("Cnidaria", fields: [ :canonical ], where: { resource_id: 1 }, misspellings: false) ; results.total_count
results = Node.search("Cnidaria", fields: [ :canonical ], where: { resource_id: 1 }, misspellings: false, load: false) ; results.total_count
Node.last.scientific_name.normalized_name
Node.last.scientific_name
Node\.last.scientific_name
Nodes.last.scientific_name
results.first
results.total_count
results = Node.search("Cnidaria", fields: [ :canonical ], where: { resource_id: 1 }, load: false)
results[2]
results[1]
results.second
results.first
results.total_count
results = Node.search("Cnidaria", fields: [ :canonical ], load: false)
results.first
results.total_count
results = Node.search("Cnidaria", fields: { canonical: :exact }, load: false)
results.total_count
results = Node.search("Cnidaria", fields: { canonical: :exact })
results.first.canonical == str
results.first.canonical
results.first
results.total_count
results = Node.search("Cnidaria", fields: [:canonical] )
str = "Cnidaria"
results.total_count
results = Node.search("Cnidaria", fields: { canonical: :phrase })
results.total_count
results = Node.search("Cnidaria", fields: [:canonical] )
results = Node.search("Cnidaria", fields: :canonical )
results.results
results = Node.search("Cnidaria")
results = Node.search("Cnidaria", fields: { canonical: :exact })
Node.search("Cnidaria", fields: { canonical: :exact }).total_count
Node.search("Cnidaria").first
Node.search("Cnidaria").total_count
Node.search("Cnidaria")
results.total_count
results = send(@strategies[opts[:strategy]], node.scientific_name)
q
puts e.backtrace[0..3]
puts e.message
q
klass.send(:new, model)
new_model
@new[klass]
klass
model
q
bt
puts caller
@resource = @harvest.resource
@resouce.id
@harvest.id
model = { harvest_id: @harvest.id, resource_id: @resouce.id, rank_verbatim: rank, verbatim: ancestor_pk, parent_resource_pk: prev, resource_pk: ancestor_pk }
q
@diff
q
c
del
c
@nodes_by_ancestry[ancestry]
puts ancestry
c
ancestry
c
ancestry
@nodes_by_ancestry
@nodes_by_ancestry[ancestry]
q
@models[:trait]
q
@models[:trait][:trait_resource_pk]
@models[:trait]
c
q
@format.diff_path
@format.diff
q
@format.diff
@path_to_file
row.size == 1
puts @line_num
puts row
puts line
puts @file
q
@diff
q
c
s
puts @models[:ancestors]
puts @models.keys
c
n
s
quit
@new[MetaTrait].first
@new[MetaTrait]
@new.keys.first
@new.keys
puts e.backtrace[20..30]
puts e.backtrace[10..20]
puts e.backtrace[0..10]
puts e.message[0..100]
c
q
puts @line_num
quit
@models[:ancestors]
fields.keys
fields
@headers
puts field
puts @field
puts e.backtrace
puts e.message
puts @line_num
puts @file
c
name.parse_quality
name.parsed?
name.verbatim
name.canonical
name.normalized
name
l
url = "http://localhost:3000/resources/#{resource.repository_id}/nodes.json&page=#{page}"
c
json = "[#{json}]"
puts json[-100..-1]
puts json[0..100]
c
q
@format.diff
c
json = json[95..-1] ; 1
json[94..100]
