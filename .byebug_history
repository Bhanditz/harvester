q
pp @file
pp @harvester
c
json = "[" + File.read(outfile).gsub("\n", ",").chop + "]"
_, stdout, stderr = Open3.popen3("gnparse file --input #{filename} --output #{outfile}")
        "--output #{outfile}")
_, stdout, stderr = Open3.popen3("gnparse file --input #{filename} "\
File.open(filename, "w") { |file| file.write(@verbatims) }
pp e.message
q
c
row
row.values.compact.size < (row.values.size / 5)
row.values.size / 5
row.values.compact.size
puts e.message
occurrence
n
s
n
s
n
@models[:occurrence]
@models
n
row
q
n
s
n
s
@formats[fid][:headers]
@formats[fid][:parser]
fmt
n
fid
n
l-
lk-
l-
n
s
l
n
c
n
any_diff
n
fields
n
q
quit
c
q
c
q
@harvest.formats.find { |fmt| fmt.data_measurements? }
@harvest.formats
field
firle
@field
@harvest.warn
@format
puts e.message
n
q
puts e
n
q
predicate_term
n
predicate
n
q
predicate
predicate_term
@models[:trait][:predicate_term_id]
@models[:trait]
c
q
@terms
c
puts e.backtrace[0..1]
puts e.message
c
row
exit
fmt.file
fmt
Format.where(resource_id: resource.id, represents: Format.represents[:data_measurements]).count
fmt2 = Format.where(resource_id: resource.id, represents: Format.represents[:data_measurements]).last
parsera
fmt.diff
fmt
diff
line_number
row
q
row
fmt.represents
fmt
q
fmt.represents
fmt
n
diff
n
row
n
row
headers
line_number
c
fmt.represents
c
fmt.represents
c
fmt.represents
fmt.file_type
fmt
c
@models[:trait]
predicate
n
@models[:trait][:of_taxon]
n
@models[:trait][:harvest_id]
n
@models[:trait][:resource_id]
n
@models[:trait][:trait_resource_pk]
exit
node_pk
backtrace
c
 c
q
c
parser.rows_as_hashes { |h| pp h }
parser.rows_as_hashes
parser.headers
parser = CsvParser.new(fmt.get_from, field_sep: fmt.field_sep, line_sep: fmt.line_sep, header_lines: fmt.header_lines, data_begins_on_line: fmt.data_begins_on_line)
                          data_begins_on_line: fmt.data_begins_on_line)
                          field_sep: fmt.field_sep, line_sep: fmt.line_sep, header_lines: fmt.header_lines,
parser = CsvParser.new(fmt.get_from,
fmt = Format.find(9)
fmt
@format
fmt = Format.find
@models[:trait]
c
@nodes
node_pk
c
@models[:trait]
pk
      ocrc = @occurrences[pk] |
@occurrences
@nodes
@occurrences
c
@models[:trait][:occurrence_resource_pk] = "Javania pseudoalabastra Zibrowius, 1974"
@models[:trait][:occurrence_resource_pk]
@models[:trait]
keys
diff
c
$FOO = 0
$FOO
c
occurrence
@models[:trait]
occurrence
n
@models[:trait]
parent
n
parent
n
c
@field
node_pk
c
line_number
c
node_hash[:resource_pk]
@nodes.keys.sort
c
node_pk
"Dendrophyllia Ilia robusta (Bourne, 1905)" == node_pk
Node.where(resource_id: @resource.id, resource_pk: node_pk)
node_pk
Node.where(resource_id: @resource.id).pluck(:resource_pk).sort
Node.where(resource_id: @resource.id).pluck(:resource_pk)
Node.where(resource_id: @resource.id).pluck(&:resource_pk)
Node.where(resource_id: @resource.id, resource_pk: node_pk).first
node_pk
@resource.id
Node.where(resource_id: 4)
 @nodes["Balanophylla imperialis Kent, 1871"]
 @nodes["Balanophyllia"]
 @nodes["Anthozoa"]
 @nodes[node_pk]
@nodes.keys.sort
node_pk
@nodes.keys.count
exit
fields[headers.first]
headers
@line_number
fields
fmt
line_number
@harvest.formats[1].converted_csv_path
@harvest.formats[1]
@harvest.formats.map { |f| f.represents }
@harvest.formats.map { |f| f.represents.name }
@harvest.formats.map(&:id)
@harvest.formats
@harvest
quit
puts e.message
row
c
exit
reload!
fmt = Format.create(resource_id: 1)
reload!
fmt = Format.create(resource_id: 1)
Format.file_types[:csv]
Format.represents[:nodes]
resource
fmt = Format.create(resource_id: resource.id, represents: Format.represents[:nodes], file_type: Format.file_types[:csv], get_from: "http://example.com/path/to_file.csv")
q
fmt = Format.create(resource_id: resource.id, represents: Format.represents[:nodes], file_type: Format.file_types[:csv], get_from: "http://example.com/path/to_file.csv")
fmt
fmt = fmt.first
fmt = fmt.fiorst
fmt = fmt.abstract
fmt = Format.where(resource_id: resource.id, represents: Format.represents[:nodes])
   11:       represents: Format.represents[:nodes])
   10:       resource_id: resource.id,
fmt = Format.where(
q
puts e.backtrace
puts e
q
puts node_pk
puts @nodes[nil]
puts @nodes.keys
q
puts node_hash
q
pp @nodes[nil]
puts @nodes[nil]
