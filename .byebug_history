quit
Language.exists?(code: lang_code)
Language.all
sdfode = @models[:vernacular].delete(:language_code_verbatim)
lang_code = @models[:vernacular].delete(:language_code_verbatim)
puts e.message
quit
puts e.message
quit
puts e.backtrace[0..200]
puts e.message
quit
reload
reload!
puts e.message
puts e.backtrace
quit
puts @models[:medium]
puts @models[:node]
puts @models.keys
puts e.backtrace
pp fmt
pp @models[:medium]
pp @models
pp fmt
pp row
q
puts e.message
exit
puts row
puts@models[:medium]
puts e
q
puts e
q
puts e
q
puts e
quit
puts e
quit
puts e
quit
puts e
quit
puts e.backtrace
puts e
quit
@nodes
@models[:medium][:node_resource_pk]
@models[:medium]
node_fk
puts e.backtrace ; 1
puts e
quit
puts e
quit
puts e.backtrace ; 1
puts e
quit
puts e
puts e.backtrace ;1
quit
@models[:parent_node].new_record?
@models[:parent_node]
@models[:parent_node].update_attribute(:parent_id, parent_id)
parent_id = @models[:ancestors].last[:node].id
@models[:ancestors].last[:node].id
@models[:ancestors].last
@models[:ancestors]
puts e.backtrace
quit
parent = @nodes[@models[:parent_node].resource_pk]
@models[:parent_node].scientific_name_id
@models[:parent_node].save
@models[:parent_node]
@models[:parent_node].resource_id
puts e.class
puts e.class_name
puts e.backtrace ; 1
exit
puts e.backtrace ; 1
exit
puts e.backtrace ; 1
@models[:scientific_name]
@models
q
pp row
pp @new_models ; 1
quit
q
puts e.message
quit
Node.last.scientific_name.verbatim
Node.last
row.values.compact.size < (row.values.size / 5)
row.values.compact.size < (row.values.size / 3)
row.values
row["Identifier http://rs.tdwg.org/dwc/terms/taxonID"].blank?
puts row
pp @new_models
exit
quit
@nodes[@new_models[:node].resource_pk]
pp @new_models
exit
@new_models[:parent_node]
@new_models.keys
@new_models
quit
harvester.harvest.hlogs
Hlog.all
fmt.hlogs
fmt.hlog
fmt
q
harvester.harvest.formats.first.fields.first
fmt
harvester.harvest.formats.first
harvester.harvest
harvester
Hlog.count
Hlogs.size
fmt.refresh
fmt.reload
fmt.reload!
fmt.hlogs
fmt
quit
fmt.hlogs
c
quit
fmt.hlogs.first.infos?
fmt.hlogs.first.warns
fmt.hlogs.first.warns?
fmt.hlogs.first
fmt.hlogs
fmt
Format.count
Hlog.count
quit
Hlog.count
quit
Hlog.count
c
doc = File.open(@file) { |f| Nokogiri::XML(f) }
l-
l
File.open(@file) { |f| puts f.readlines }
File.open(@file) { |f| puts f }
puts doc
pp doc
c
q
c
